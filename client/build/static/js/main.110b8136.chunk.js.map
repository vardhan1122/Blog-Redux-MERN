{"version":3,"sources":["assets/img/spinner.gif","components/home/Home.js","components/navbar/Navbar.js","redux/BlogRedux/blog.actions.js","redux/BlogRedux/blog.actionTypes.js","redux/BlogRedux/blog.reducer.js","components/spinner/Spinner.js","components/blogs/BlogAdmin.js","components/blogs/BlogList.js","components/blogs/UpdateBlog.js","components/blogs/CreateBlog.js","redux/root.reducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Fragment","className","Navbar","to","data-toggle","data-target","id","fetchAllBlogs","dispatch","type","Axios","get","then","response","payload","data","catch","error","updateBlogForm","key","value","initialState","loading","blogs","selectedBlog","errorMessage","Spinner","src","spinnerImage","alt","BlogAdmin","useDispatch","blogInfo","useSelector","state","useEffect","clickDeleteBlog","blogId","dataURL","delete","deleteBlog","length","map","blog","_id","substr","image","width","height","name","heading","info","slice","href","infoURL","target","created","onClick","bind","colSpan","BlogList","dateFormat","style","paddingBottom","UpdateBlog","history","useHistory","useState","useParams","selectedBlogInfo","fetchBlog","changeInput","event","changeImage","a","imageFile","files","reader","FileReader","readAsDataURL","addEventListener","result","alert","onSubmit","preventDefault","put","push","updateBlog","onChange","placeholder","htmlFor","rows","CreateBlog","setBlog","post","createBlog","required","marginBottom","rootReducer","combineReducers","action","middleWares","logger","thunk","store","createStore","composeWithDevTools","applyMiddleware","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.110b8136.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.26ef8bb4.gif\";","import React from \"react\";\r\n\r\nlet Home = () => {\r\n    return(\r\n        <React.Fragment>\r\n            <section className=\"home-image\">\r\n                <div className=\"landing-page\">\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"d-flex flex-column text-center justify-content-center align-items-center\">\r\n                            <h2 className=\"display-4 animated slideInDown font-weight-bold\">\r\n                            <i className=\"fa fa-blog\"/> Blog's Redux(MERN)</h2>\r\n                            <p className=\"px-3 animated slideInUp\">A blog (a shortened version of “weblog”) is an online journal or informational website displaying information in the reverse chronological order, with the latest posts appearing first, at the top. It is a platform where a writer or a group of writers share their views on an individual subject.</p>\r\n                            <p className=\"px-3 animated slideInUp\">So, the main purpose of a blog is to connect you to the relevant audience. Another one is to boost your traffic and send quality leads to your website.</p>\r\n                            <p className=\"px-3 animated slideInUp\">The more frequent and better your blog posts are, the higher the chances for your website to get discovered and visited by your target audience. This means that a blog is an effective lead generation tool. Add a great call to action (CTA) to your content, and it will convert your website traffic into high-quality leads. A blog also allows you to showcase your niche authority and build a brand.</p>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nlet Navbar = () => {\r\n    return (\r\n        <React.Fragment>\r\n                <nav className=\"navbar navbar-dark bg-success navbar-expand-sm\">\r\n                    <div className=\"container-fluid\">\r\n                        <Link to='/' className=\"navbar-brand\">\r\n                           <i className=\"fa fa-blog\"/> BLOG-REDUX(MERN)\r\n                        </Link>\r\n                        <button className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#simpleNavbar\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"simpleNavbar\">\r\n                            <ul className=\"navbar-nav\">\r\n                                <li className=\"nav-item\">\r\n                                    <Link to='/' className=\"nav-link\">HOME</Link>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link to='/blogs' className=\"nav-link\">BLOGS</Link>\r\n                                </li>\r\n                            </ul>\r\n                            <ul className=\"navbar-nav ml-auto\">\r\n                                <li className=\"nav-item\">\r\n                                    <Link to='/admin' className=\"nav-link\">ADMIN-USER</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </React.Fragment>\r\n    )\r\n};\r\nexport default Navbar;\r\n","import {\r\n    CREATE_BLOG_FAILURE,\r\n    CREATE_BLOG_REQUEST,\r\n    CREATE_BLOG_SUCCESS, DELETE_BLOG_FAILURE, DELETE_BLOG_REQUEST, DELETE_BLOG_SUCCESS,\r\n    FETCH_ALL_BLOGS_FAILURE,\r\n    FETCH_ALL_BLOGS_REQUEST,\r\n    FETCH_ALL_BLOGS_SUCCESS,\r\n    FETCH_BLOG_FAILURE,\r\n    FETCH_BLOG_REQUEST,\r\n    FETCH_BLOG_SUCCESS, UPDATE_BLOG_FAILURE,\r\n    UPDATE_BLOG_FORM,\r\n    UPDATE_BLOG_REQUEST, UPDATE_BLOG_SUCCESS\r\n} from \"./blog.actionTypes\";\r\n\r\nimport Axios from \"axios\";\r\n\r\n// FETCH ALL BLOGS\r\nlet fetchAllBlogs = () => {\r\n    return (dispatch) => {\r\n        dispatch({ type : FETCH_ALL_BLOGS_REQUEST});\r\n        let dataURL = `https://blog-portal-mern-backend.herokuapp.com/api/blogs`;\r\n        Axios.get(dataURL).then((response) => {\r\n            dispatch({ type: FETCH_ALL_BLOGS_SUCCESS , payload : response.data });\r\n        }).catch((error) => {\r\n            dispatch({ type: FETCH_ALL_BLOGS_FAILURE , payload : error });\r\n        });\r\n    };\r\n};\r\n\r\n// CREATE A BLOG\r\nlet createBlog = (blog,history) => {\r\n    return (dispatch) => {\r\n        dispatch({ type : CREATE_BLOG_REQUEST });\r\n        let dataURL = `https://blog-portal-mern-backend.herokuapp.com/api/blogs/`;\r\n        Axios.post(dataURL, blog).then((response) => {\r\n            dispatch({ type : CREATE_BLOG_SUCCESS , payload : response.data });\r\n            // Redirecting Page\r\n            history.push('/admin');\r\n        }).catch((error) => {\r\n            dispatch({ type : CREATE_BLOG_FAILURE , payload : error });\r\n        });\r\n    };\r\n};\r\n\r\n// FETCH A SINGLE BLOG\r\nlet fetchBlog = (blogId) => {\r\n    return (dispatch) => {\r\n        dispatch({ type : FETCH_BLOG_REQUEST });\r\n        let dataURL = `https://blog-portal-mern-backend.herokuapp.com/api/blogs/${blogId}`;\r\n        Axios.get(dataURL).then((response) => {\r\n            dispatch({ type : FETCH_BLOG_SUCCESS , payload : response.data});\r\n        }).catch((error) => {\r\n            dispatch({ type : FETCH_BLOG_FAILURE , payload : error});\r\n        });\r\n    };\r\n};\r\n\r\n// UPDATE A BLOG FORM\r\nlet updateBlogForm = (key , value) => {\r\n    return (dispatch) => {\r\n        dispatch({type : UPDATE_BLOG_FORM , payload : { key , value} });\r\n    };\r\n};\r\n\r\n// UPDATE BLOG\r\nlet updateBlog = (blogId, selectedBlog, history) => {\r\n    return (dispatch) => {\r\n        dispatch({ type : UPDATE_BLOG_REQUEST });\r\n        let dataURL = `https://blog-portal-mern-backend.herokuapp.com/api/blogs/${blogId}`;\r\n        Axios.put(dataURL, selectedBlog).then((response) => {\r\n            dispatch({ type : UPDATE_BLOG_SUCCESS , payload : response.data});\r\n            history.push('/admin');\r\n        }).catch((error) => {\r\n            dispatch({ type : UPDATE_BLOG_FAILURE , payload : error});\r\n        });\r\n    };\r\n};\r\n\r\n// DELETE BLOG\r\nlet deleteBlog = (blogId) => {\r\n    return (dispatch) => {\r\n        dispatch({type : DELETE_BLOG_REQUEST});\r\n        let dataURL = `https://blog-portal-mern-backend.herokuapp.com/api/blogs/${blogId}`;\r\n        Axios.delete(dataURL).then((response) => {\r\n            dispatch({ type : DELETE_BLOG_SUCCESS , payload : response.data});\r\n            dispatch(fetchAllBlogs()); // fetch all Blogs once delete is done\r\n        }).catch((error) => {\r\n            dispatch({ type : DELETE_BLOG_FAILURE , payload : error});\r\n        });\r\n    };\r\n};\r\n\r\nexport {    fetchAllBlogs,\r\n            createBlog,\r\n            fetchBlog,\r\n            updateBlogForm,\r\n            updateBlog,\r\n            deleteBlog  };\r\n","// FETCH ALL BLOGS\r\nexport const FETCH_ALL_BLOGS_REQUEST = 'FETCH_ALL_BLOGS_REQUEST';\r\nexport const FETCH_ALL_BLOGS_SUCCESS = 'FETCH_ALL_BLOGS_SUCCESS';\r\nexport const FETCH_ALL_BLOGS_FAILURE = 'FETCH_ALL_BLOGS_FAILURE';\r\n\r\n// FETCH SINGLE BLOG\r\nexport const FETCH_BLOG_REQUEST = 'FETCH_BLOG_REQUEST';\r\nexport const FETCH_BLOG_SUCCESS = 'FETCH_BLOG_SUCCESS';\r\nexport const FETCH_BLOG_FAILURE = 'FETCH_BLOG_FAILURE';\r\n\r\n// CREATE A BLOG\r\nexport const CREATE_BLOG_REQUEST = 'CREATE_BLOG_REQUEST';\r\nexport const CREATE_BLOG_SUCCESS = 'CREATE_BLOG_SUCCESS';\r\nexport const CREATE_BLOG_FAILURE = 'CREATE_BLOG_FAILURE';\r\n\r\n// UPDATE A BLOG\r\nexport const UPDATE_BLOG_REQUEST = 'UPDATE_BLOG_REQUEST';\r\nexport const UPDATE_BLOG_SUCCESS = 'UPDATE_BLOG_SUCCESS';\r\nexport const UPDATE_BLOG_FAILURE = 'UPDATE_BLOG_FAILURE';\r\n// UPDATE A BLOG FORM\r\nexport const UPDATE_BLOG_FORM = 'UPDATE_BLOG_FORM';\r\n\r\n// DELETE A BLOG\r\nexport const DELETE_BLOG_REQUEST = 'DELETE_BLOG_REQUEST';\r\nexport const DELETE_BLOG_SUCCESS = 'DELETE_BLOG_SUCCESS';\r\nexport const DELETE_BLOG_FAILURE = 'DELETE_BLOG_FAILURE';\r\n","import {\r\n    CREATE_BLOG_FAILURE,\r\n    CREATE_BLOG_REQUEST,\r\n    CREATE_BLOG_SUCCESS, DELETE_BLOG_FAILURE, DELETE_BLOG_REQUEST, DELETE_BLOG_SUCCESS,\r\n    FETCH_ALL_BLOGS_FAILURE,\r\n    FETCH_ALL_BLOGS_REQUEST,\r\n    FETCH_ALL_BLOGS_SUCCESS,\r\n    FETCH_BLOG_FAILURE,\r\n    FETCH_BLOG_REQUEST,\r\n    FETCH_BLOG_SUCCESS, UPDATE_BLOG_FAILURE,\r\n    UPDATE_BLOG_FORM,\r\n    UPDATE_BLOG_REQUEST, UPDATE_BLOG_SUCCESS\r\n} from \"./blog.actionTypes\";\r\n\r\nexport const BLOG_FEATURE_KEY =  'blogRedux';\r\n\r\nlet initialState = {\r\n    loading : false,\r\n    blogs : [],\r\n    selectedBlog : {},\r\n    errorMessage : ''\r\n};\r\n\r\nlet blogReducer = (state = initialState , action) => {\r\n    let { type , payload} = action;\r\n    switch(type) {\r\n        // REQUEST BLOG\r\n        case FETCH_ALL_BLOGS_REQUEST:\r\n        case CREATE_BLOG_REQUEST:\r\n        case FETCH_BLOG_REQUEST :\r\n        case UPDATE_BLOG_REQUEST:\r\n        case DELETE_BLOG_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case FETCH_ALL_BLOGS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                blogs: payload\r\n            };\r\n\r\n        // CREATE A BLOG\r\n        case  CREATE_BLOG_SUCCESS :\r\n            return  {\r\n                ...state,\r\n                loading: false\r\n            };\r\n\r\n        // FETCH A SINGLE BLOG\r\n        case FETCH_BLOG_SUCCESS :\r\n            return  {\r\n                ...state,\r\n                loading: false,\r\n                selectedBlog: payload\r\n            };\r\n\r\n        // UPDATE A BLOG FORM\r\n        case UPDATE_BLOG_FORM:\r\n            return  {\r\n                ...state,\r\n                loading: false,\r\n                selectedBlog : {\r\n                    ...state.selectedBlog,\r\n                    [payload.key] : payload.value\r\n                }\r\n            };\r\n        // UPDATE BLOG\r\n        case UPDATE_BLOG_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            };\r\n        // DELETE BLOG\r\n        case DELETE_BLOG_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            };\r\n\r\n        // FAILURE BLOG\r\n        case FETCH_ALL_BLOGS_FAILURE:\r\n            case CREATE_BLOG_FAILURE:\r\n            case FETCH_BLOG_FAILURE:\r\n            case UPDATE_BLOG_FAILURE:\r\n            case DELETE_BLOG_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: payload\r\n            };\r\n\r\n        default : return state;\r\n    }\r\n};\r\nexport {blogReducer};\r\n","import React from \"react\";\r\nimport spinnerImage from '../../assets/img/spinner.gif';\r\n\r\nlet Spinner = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <img src={spinnerImage} alt=\"\" className=\"d-block m-auto\"/>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default Spinner;\r\n","import React, {useEffect} from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteBlog, fetchAllBlogs} from \"../../redux/BlogRedux/blog.actions\";\r\nimport {BLOG_FEATURE_KEY} from \"../../redux/BlogRedux/blog.reducer\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nlet BlogAdmin = () => {\r\n    let dispatch = useDispatch();\r\n\r\n    // fetch blog info from the REDUX Store\r\n    let blogInfo = useSelector((state) => {\r\n        return state[BLOG_FEATURE_KEY];\r\n    });\r\n\r\n    // dispatch action to fetch all blogs from server\r\n    useEffect(() => {\r\n        dispatch(fetchAllBlogs());\r\n    }, []);\r\n\r\n\r\n\r\n    // delete Blog\r\n    let clickDeleteBlog = (blogId) => {\r\n       dispatch(deleteBlog(blogId));\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <section className=\"admin-page-full\">\r\n        <section className=\"admin-page\">\r\n            <div className=\"container\">\r\n                <div className=\"row animated slideInLeft\">\r\n                    <div className=\"col\">\r\n                        <p className=\"h2 text-white\">Admin Blog's</p>\r\n                        <Link to=\"/create-blog\" className=\"btn btn-success btn-sm\">Create Blog</Link>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    blogInfo.loading ? <Spinner/> :\r\n                        <React.Fragment>\r\n                            <div className=\"row mt-3 animated zoomIn\">\r\n                                <div className=\"col\">\r\n                                    <div id=\"table-wrapper\">\r\n                                    <div id=\"table-scroll\">\r\n                                        <table className=\"table table-hover text-center table-striped table-success\">\r\n                                            <thead className=\"bg-dark text-white\">\r\n                                            <tr>\r\n                                                <th>SNO</th>\r\n                                                <th>Blog Image</th>\r\n                                                <th>Title</th>\r\n                                                <th>Heading</th>\r\n                                                <th>Info</th>\r\n                                                <th>Info URL</th>\r\n                                                <th>Created</th>\r\n                                                <th>Actions</th>\r\n                                            </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                            {\r\n                                                blogInfo.blogs.length > 0 ?\r\n                                                    <React.Fragment>\r\n                                                        {\r\n                                                            blogInfo.blogs.map((blog) => {\r\n                                                                return (\r\n                                                                    <tr key={blog._id}>\r\n                                                                        <td>{blog._id.substr(blog._id.length - 4)}</td>\r\n                                                                        <td>\r\n                                                                            <img src={blog.image} alt=\"\" width=\"70\" height=\"70\"/>\r\n                                                                        </td>\r\n                                                                        <td>{blog.name}</td>\r\n                                                                        <td>{blog.heading}</td>\r\n                                                                        <td>{blog.info.slice(0,9)}...</td>\r\n                                                                        <td><a href={blog.infoURL} alt=\"\" target=\"_blank\">Info-URL</a></td>\r\n                                                                        <td>{blog.created}</td>\r\n                                                                        <td>\r\n                                                                            <Link to={`/update-blog/${blog._id}`} className=\"btn btn-secondary btn-sm text-white\">Update</Link>\r\n                                                                            <button onClick={clickDeleteBlog.bind(this, blog._id)} className=\"btn btn-danger btn-sm text-white\">Delete</button>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </React.Fragment> : <React.Fragment>\r\n                                                        <tr>\r\n                                                            <td colSpan=\"6\" className=\"text-danger font-weight-bold\">------------- No BLOGS are Available ------------ </td>\r\n                                                        </tr>\r\n                                                    </React.Fragment>\r\n                                            }\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </React.Fragment>\r\n                }\r\n            </div>\r\n        </section>\r\n        </section>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default BlogAdmin;\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchAllBlogs} from \"../../redux/BlogRedux/blog.actions\";\r\nimport {BLOG_FEATURE_KEY} from \"../../redux/BlogRedux/blog.reducer\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\nlet BlogList = () => {\r\n    let dispatch = useDispatch();\r\n\r\n    // fetch Blog info from the REDUX Store\r\n    let blogInfo = useSelector((state) => {\r\n        return state[BLOG_FEATURE_KEY];\r\n    });\r\n\r\n    // dispatch an action to fetch all Blogs from server\r\n    useEffect(() => {\r\n        dispatch(fetchAllBlogs());\r\n    }, []);\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <section className=\"blog-page-full\">\r\n        <section className=\"blog-page\">\r\n            <div className=\"container\">\r\n                <div className=\"row animated slideInLeft\">\r\n                    <div className=\"col\">\r\n                        <p className=\"h2 text-black\">Blog's Details</p>\r\n    \r\n                    </div>\r\n                </div>\r\n                {/* Checking Data is fetching / Not */}\r\n            {/* <pre>{JSON.stringify(blogInfo.blogs)}</pre> */}\r\n                {\r\n                    // Spinner is running when Loading the data\r\n                    blogInfo.loading ? <Spinner/> :\r\n                        <React.Fragment>\r\n                            <div className=\"row animated zoomIn\">\r\n                                {\r\n                                    blogInfo.blogs.length > 0 ?\r\n                                        <React.Fragment>\r\n                                            {\r\n                                                blogInfo.blogs.map((blog) => {\r\n                                                    return (\r\n\r\n                                                        <div className=\"col-md-12\" key={blog._id}>\r\n\r\n                                                    <div className=\"card mt-3\">\r\n                                                        \r\n                                                        <div className=\"card-header text-center bg-warning text-white\">\r\n                                                            <div> <span className=\"topic\">Topic</span> : <span className=\"topic-text\">{blog.name}</span></div>\r\n                                                        </div>\r\n\r\n                                                        <div className=\"card-body bg-info text-white\">\r\n                                                            {/* <div className=\"container-fluid\"> */}\r\n                                                                <div className=\"row flex-column-reverse flex-md-row\">\r\n                                                                    <div className=\"col-md-7\">\r\n                                                                    <span><span className=\"heading\">Heading</span> : <span className=\"heading-text\">{blog.heading}</span></span><br/>\r\n                                                                    <span className=\"info\">Info</span> : <span className=\"info-text\">{blog.info}</span>\r\n                                                                    </div>\r\n\r\n                                                                    <div className=\"col-md-5\">\r\n                                                                    <img className=\"img-fluid blog-image\" src={blog.image} alt=\"\" width=\"400\" height=\"250\"/>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            {/* </div> */}\r\n                                                        </div>\r\n\r\n                                                        <div className=\"card-footer bg-success text-white\">\r\n                                                           <a className=\"infoURL\" href = {blog.infoURL} alt=\"\" target=\"_blank\">continue reading..</a>\r\n                                                             <span className=\"float-right\"><span className=\"created\">Created at</span> : <span className=\"created-text\"> {dateFormat(blog.created,\"mmm dS, yyyy, hh:mm:ss TT\")}</span></span>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                          \r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        </React.Fragment> : <React.Fragment>\r\n                                            <div>\r\n                                                <p className=\"h5 text-danger\">---------------- No BLOG'S are Available --------------</p>\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                }\r\n                            </div>\r\n                        </React.Fragment>\r\n                }\r\n            </div>\r\n            <div style={{paddingBottom : '50px'}}/>\r\n        </section>\r\n        </section>\r\n        \r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default BlogList;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useParams, useHistory} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchBlog, updateBlog, updateBlogForm} from \"../../redux/BlogRedux/blog.actions\";\r\nimport {BLOG_FEATURE_KEY} from \"../../redux/BlogRedux/blog.reducer\";\r\n\r\nlet UpdateBlog = () => {\r\n    let dispatch = useDispatch();\r\n    let history = useHistory();\r\n    // Selected Blog ID\r\n    let [blogId , setBlogId] = useState(useParams().id);\r\n\r\n    // get selected Blog from REDUX Store\r\n    let selectedBlogInfo = useSelector((state) => {\r\n        return state[BLOG_FEATURE_KEY];\r\n    });\r\n\r\n      // dispatch action to fetch all blogs from server\r\n    useEffect(() => {\r\n        dispatch(fetchBlog(blogId));\r\n    }, [blogId]);\r\n\r\n    // change Blog Input(edit Blog Data)\r\n    let changeInput = (event) => {\r\n        let key = event.target.name;\r\n        let value = event.target.value;\r\n        dispatch(updateBlogForm(key , value));\r\n    };\r\n\r\n    // change Image (Convert to base64 Format)\r\n    let changeImage = async (event) => {\r\n        let imageFile = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(imageFile);\r\n        reader.addEventListener('load', () => {\r\n            if(reader.result){\r\n                let key = 'image';\r\n                let value = reader.result;\r\n                dispatch(updateBlogForm(key , value));\r\n            }\r\n            else {\r\n                alert('Error Occurred');\r\n            }\r\n        });\r\n    };\r\n\r\n    // submit Blog\r\n    let submitBlog = (event) => {\r\n        event.preventDefault();\r\n        dispatch(updateBlog(blogId, selectedBlogInfo.selectedBlog , history));\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <section className=\"update-page\">\r\n            <div className=\"container\">\r\n                <div className=\"row animated slideInLeft\">\r\n                    <div className=\"col\">\r\n                        <p className=\"h2 text-white\">Update Blog</p> \r\n                    </div>\r\n                </div>\r\n                <div className=\"row animated flipInY delay-1s\">\r\n                    <div className=\"col-md-5\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-secondary text-white\">\r\n                                <p className=\"h4\">Update Blog</p>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={submitBlog}>\r\n                                    <div className=\"form-group\">\r\n                                        <input\r\n                                            name=\"name\"\r\n                                            value={selectedBlogInfo.selectedBlog.name}\r\n                                            onChange={changeInput}\r\n                                            type=\"text\" className=\"form-control\" placeholder=\"Name\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <div className=\"custom-file\">\r\n                                            <input\r\n                                                onChange={changeImage}\r\n                                                type=\"file\" className=\"custom-file-input\" id=\"customFile\"/>\r\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Product\r\n                                                Image</label>\r\n                                            {\r\n                                                selectedBlogInfo.selectedBlog.image &&\r\n                                                <img src={selectedBlogInfo.selectedBlog.image} alt=\"\"\r\n                                                     width=\"20\" height=\"20\"/>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input\r\n                                            name=\"heading\"\r\n                                            value={selectedBlogInfo.selectedBlog.heading}\r\n                                            onChange={changeInput}\r\n                                            type=\"string\" className=\"form-control\" placeholder=\"Heading..\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea\r\n                                            name=\"info\"\r\n                                            value={selectedBlogInfo.selectedBlog.info}\r\n                                            onChange={changeInput}\r\n                                            type=\"string\" className=\"form-control\" rows=\"3\" placeholder=\"Information..\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                           <input\r\n                                               name=\"infoURL\"\r\n                                               value={selectedBlogInfo.selectedBlog.infoURL}\r\n                                               onChange={changeInput}\r\n                                               className=\"form-control\"  placeholder=\"Info URL\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" className=\"btn btn-secondary btn-sm\"\r\n                                               value=\"Update Blog\"/>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{paddingBottom : '50px'}}/>\r\n        </section>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default UpdateBlog;\r\n","import React, {useState} from \"react\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {createBlog} from \"../../redux/BlogRedux/blog.actions\";\r\n\r\nlet CreateBlog = () => {\r\n    let dispatch = useDispatch();\r\n    let history = useHistory();\r\n    let [blog , setBlog] = useState({\r\n        name : '',\r\n        image : '',\r\n        heading : '',\r\n        info : '',\r\n        infoURL : ''\r\n    });\r\n\r\n // change Blog Input(edit Blog Data)\r\n    let changeInput = (event) => {\r\n        setBlog({\r\n            ...blog,\r\n            [event.target.name] : event.target.value\r\n        });\r\n    };\r\n\r\n      // change Image (Convert to base64 Format)\r\n    let changeImage = async (event) => {\r\n        let imageFile = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(imageFile);\r\n        reader.addEventListener('load', () => {\r\n            if(reader.result){\r\n                setBlog({\r\n                    ...blog,\r\n                    image : reader.result\r\n                });\r\n            }\r\n            else {\r\n                alert('Error Occurred');\r\n            }\r\n        });\r\n    };\r\n\r\n    // submit Blog\r\n    let submitBlog = (event) => {\r\n        event.preventDefault();\r\n        dispatch(createBlog(blog , history));\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <section className=\"create-page\">\r\n            <div className=\"container\">\r\n                <div className=\"row animated slideInLeft\">\r\n                    <div className=\"col\">\r\n                        <p className=\"h2 text-black\">Create Blog</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row animated flipInY delay-1s\">\r\n                    <div className=\"col-md-5\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-dark text-white\">\r\n                                <p className=\"h4\">Create Blog</p>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={submitBlog}>\r\n                                    <div className=\"form-group\">\r\n                                        <input required\r\n                                               name=\"name\"\r\n                                               value={blog.name}\r\n                                               onChange={changeInput}\r\n                                               type=\"text\" className=\"form-control\"\r\n                                               placeholder=\"Blog Name\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <div className=\"custom-file\">\r\n                                            <input required\r\n                                                   onChange={changeImage}\r\n                                                   type=\"file\" className=\"custom-file-input\"\r\n                                                   id=\"customFile\"/>\r\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Blog\r\n                                                Image</label>\r\n                                            {\r\n                                                blog.image &&\r\n                                                <img src={blog.image} alt=\"\" width=\"20\"\r\n                                                     height=\"20\"/>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input required\r\n                                               name=\"heading\"\r\n                                               value={blog.heading}\r\n                                               onChange={changeInput}\r\n                                               type=\"string\" className=\"form-control\" placeholder=\"Heading..\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea required\r\n                                               name=\"info\"\r\n                                               value={blog.info}\r\n                                               onChange={changeInput}\r\n                                               type=\"string\" className=\"form-control\" rows=\"3\"\r\n                                               placeholder=\"Information..\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                            <input required\r\n                                                      name=\"infoURL\"\r\n                                                      value={blog.infoURL}\r\n                                                      onChange={changeInput}\r\n                                                      className=\"form-control\"  placeholder=\"Info URL\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" className=\"btn btn-dark btn-sm\"\r\n                                               value=\"Create Blog\"/>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{marginBottom : '100px'}}/>\r\n        </section>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default CreateBlog;\r\n","import {combineReducers} from \"redux\";\r\nimport {BLOG_FEATURE_KEY, blogReducer} from \"./BlogRedux/blog.reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    [BLOG_FEATURE_KEY] : blogReducer\r\n});\r\n\r\nexport {rootReducer};\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport {rootReducer} from \"./root.reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport logger from 'redux-logger';\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet middleWares = [logger , thunk];\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleWares)));\r\nexport {store};\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./components/home/Home\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport {BrowserRouter as Router , Route , Switch} from 'react-router-dom';\nimport BlogAdmin from \"./components/blogs/BlogAdmin\";\nimport BlogList from \"./components/blogs/BlogList\";\nimport UpdateBlog from \"./components/blogs/UpdateBlog\";\nimport CreateBlog from \"./components/blogs/CreateBlog\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nlet App = () => {\n\n    return(\n        <React.Fragment>\n           <Provider store={store}>\n               <Router>\n                   <Navbar/>\n                   <Switch>\n                       <Route exact path=\"/\" component={Home}/>\n                       <Route exact path='/blogs' component={BlogList}/>\n                       <Route exact path='/admin' component={BlogAdmin}/>\n                       <Route exact path='/create-blog' component={CreateBlog}/>\n                       <Route exact path='/update-blog/:id' component={UpdateBlog}/>\n                   </Switch>\n               </Router>\n           </Provider>\n        </React.Fragment>\n    );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// MDBootstrap css files\nimport './bootstrap/css/font-awesome-5.8.1.css';\nimport 'mdbootstrap/css/bootstrap.css';\nimport 'mdbootstrap/css/mdb.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}